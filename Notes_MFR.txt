Match_File_Renamer.py notes

Tested under two cases with this version of code:
    Time Complexity: O(n_rename * n_source * m)
    Tested with 11 files in source and 10 in rename: ~10ms
        with logs for which files get renamed, which don't etc.: ~540ms
    Tested with 1,755 files in source and 342 files in rename: ~19.51s
        with logs: ~19.2s

    import os
    import difflib
    import sys
    import time

    '''This script is meant to look for files with similar names and change the
    input file to match the file names of the "source" file with a similar name,
    created for the use of large amount of files needing to be renamed to match
    another folder with a very large amount of files.

    - Dragphan 2024
    '''

    # Define the file inputs
    rename_path = sys.argv[1]
    source_path = sys.argv[2]

    start_time = time.time()

    rename_files = os.listdir(rename_path)  # File(s) to be renamed
    source_files = os.listdir(source_path)  # File(s) to match name

    # print(rename_files)
    # print(source_files)


    # Create a list without extensions (e.x .zip) so that extension isn't overridden
    source_files_name = [os.path.splitext(file)[0] for file in source_files]
    # print(source_files_name)
    # print("\n\n")

    for file in rename_files:
        rename_name, rename_ext = os.path.splitext(file)
        # print(f"Name: {rename_name} Extension: {rename_ext}")

        closest_match = difflib.get_close_matches(rename_name,
                                                  source_files_name, 1, 0.4)
        if closest_match:
            try:
                # Get path of file to be renamed
                old_file_path = os.path.join(rename_path, file)

                # Path new file with correct extension
                new_file_name = closest_match[0] + rename_ext
                new_file_path = os.path.join(rename_path, new_file_name)

                os.rename(old_file_path, new_file_path)
                # print(f"New file name: {new_file}")
                # print(f"Closest match: {closest_match}\n")

            # TODO: Can improve on this by checking for which file would be a better
            #  match for the rename
            except FileExistsError:
                pass


    end_time = time.time()
    print(f"Time to run: {end_time - start_time} seconds")



Comparing Multi-threaded(v2) vs. Single-threaded(v1.5)
            From scratch, All files already renamed avg. of 4
10 files, 11 source: .07, .0613 vs. .086, .0975
    %improvement: 18.6%, 37.13%
345 files, 1,755 source: 15.489, 41.616 vs. 17.309, 50.988
    %improvement: 10.51%, 18.38%
4,466 files, 13,050 source: 1535.944, vs 1735,
    %improvement: 11.47%